// SPDX-FileCopyrightText: Copyright 2024 shadPS4 Emulator Project
// SPDX-License-Identifier: GPL-2.0-or-later

#version 450

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer input_buf {
    uint in_data[];
};
layout(rg32ui, binding = 1) uniform writeonly uimage2D output_img;

layout(push_constant) uniform image_info {
    uint pitch;
} info;

// Inverse morton LUT, small enough to fit into K$
uint rmort[16] = {
    0x11011000, 0x31213020,
    0x13031202, 0x33233222,
    0x51415040, 0x71617060,
    0x53435242, 0x73637262,

    0x15051404, 0x35253424,
    0x17071606, 0x37273626,
    0x55455444, 0x75657464,
    0x57475646, 0x77677666,
};

#define MICRO_TILE_DIM      (8)

void main() {
    uint bit_ofs = 8 * (gl_LocalInvocationID.x % 4);
    uint packed_pos = rmort[gl_LocalInvocationID.x >> 2] >> bit_ofs;
    uint col = bitfieldExtract(packed_pos, 4, 4);
    uint row = bitfieldExtract(packed_pos, 0, 4);

    uint block_ofs = 2 * gl_GlobalInvocationID.x;
    uint p0 = in_data[block_ofs + 0];
    uint p1 = in_data[block_ofs + 1];

    uint tiles_per_pitch = (info.pitch >> 3) >> 2; // log2(MICRO_TILE_DIM) / 4
    ivec2 img_pos = MICRO_TILE_DIM * ivec2(
        gl_WorkGroupID.x % tiles_per_pitch,
        gl_WorkGroupID.x / tiles_per_pitch
    );
    imageStore(output_img, img_pos + ivec2(col, row), uvec4(p0, p1, 0, 0));
}